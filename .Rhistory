10*10
10000
10000^2
??readOGR
??readOGR
require(rgdal)
EEZ <- readOGR("./shapefiles/Atlantic_eez", "Atlantic_eez")
plot(EEZ)
EEZ@data
ConPoly <- EEZ
ConPoly <- EEZ
ConPoly_hex <- ConPoly
.25/sqrt(2)
20*28
hex_area_km <- 560
hex_area <- hex_area_km*1000000
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
ConPoly_hex = gBuffer(ConPoly_hex, width = 0)
??gBuffer
library(rgeos)
?spsample
?HexPoints2SpatialPolygons
#Clear workspace
rm(list=ls())
library(rgdal)
library(rgeos)
library(sp)
#Clipping to your study extent
EEZ <- readOGR("./shapefiles/Atlantic_eez", "Atlantic_eez")
#Loading Remi's grid where larvae were released
#grid <- readOGR("./shapefiles", "")
#NAD_projection <- proj4string(grid)
#Dissolve into one polygon since so you can change grid dimensions
#grid <- spTransform(grid, EEZ@proj4string)
#grid <- gUnaryUnion(grid)
#Intersecting - don't know why this works and ConPoly2 <- grid[EEZ,] doesn't
#ConPoly <- gIntersection(grid, EEZ, byid = FALSE, drop_lower_td = TRUE) #This works, but you'll have to choose a shapefile that includes islands and doesn't cut-off at rivers
#Adding dataframe so you can create a shapefile of new study extent
#ConPoly_ID <- 1
#ConPoly <- SpatialPolygonsDataFrame(ConPoly, as.data.frame(ConPoly_ID))
#writeOGR(ConPoly, dsn = "", layer = "EEZ_hexagons",
#        driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
ConPoly <- EEZ
#Creating the hexagon layer
ConPoly_hex <- ConPoly
#0.25 degrees is approx. 20 horizontal X 28 vertical km = 560 km2
hex_area_km <- 560
hex_area <- hex_area_km*1000000
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
ConPoly_hex = gBuffer(ConPoly_hex, width = 0)
HexPts <- spsample(ConPoly_hex, type="hexagonal", cellsize = dist_between_centroids, offset = c(0, 0))
HexPols <- HexPoints2SpatialPolygons(HexPts)
plot(HexPols)
row.names(HexPols) <- as.character(1:length(HexPols))
Poly_ID <- 1:length(HexPols)
HexPols <- SpatialPolygonsDataFrame(HexPols, as.data.frame(Poly_ID))
ConPoly <- HexPols
writeOGR(ConPoly, dsn = "./output", layer = "Hexagon_grid",
driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
20*28
library(robis)
install.packages("robis")
library(devtools)
library(robis)
library(tidyverse)
library(rgbif)
install.packages("ff")
library(ff)
?ff
library(devtools)
library(robis)
library(tidyverse)
library(rgbif)
###Loading packages
library(devtools)
#install_github("iobis/robis")
library(robis)
library(tidyverse)
library(rgbif)
#library(ff)
getwd()
obisdata <- occurrence(geometry =
"POLYGON ((-69.14795 44.02442, -67.71973 41.45920,
-61.52344 40.01079, -53.17383 41.57436, -47.37305 46.31658,
-46.31836 50.62507, -48.60352 54.74999, -53.65723 58.63122,
-63.32520 59.04055, -73.87207 46.76997, -69.14795 44.02442))")
nrow(obisdata)
backup <- obisdata
df1 <- obisdata[c(1:10),]
View(obisdata)
View(df1)
df1 <- obisdata[c(1:1000000),]
getwd()
write.csv(df1, "./output/LargeData/df1.csv")
df2 <- obisdata[c(1000001:2000000),]
write.csv(df2, "./output/LargeData/df2.csv")
df3 <- obisdata[c(2000001:3901265),]
write.csv(df3, "./output/LargeData/df3.csv")
###Loading packages
library(devtools)
#install_github("iobis/robis")
library(robis)
library(tidyverse)
library(rgbif)
#library(ff)
getwd()
obisdata <- occurrence(geometry =
"POLYGON ((-69.14795 44.02442, -67.71973 41.45920,
-61.52344 40.01079, -53.17383 41.57436, -47.37305 46.31658,
-46.31836 50.62507, -48.60352 54.74999, -53.65723 58.63122,
-63.32520 59.04055, -73.87207 46.76997, -69.14795 44.02442))")
backup <- obisdata
df1 <- obisdata[c(1:1000000),]
write.csv(df1, "./LargeData/OBIS/OBISData_part1of4.csv")
df2 <- obisdata[c(1000001:2000000),]
write.csv(df1, "./LargeData/OBIS/OBISData_part2of4.csv")
df3 <- obisdata[c(2000001:3000000),]
write.csv(df1, "./LargeData/OBIS/OBISData_part3of4.csv")
df1 <- obisdata[c(1:1000000),]
write.csv(df1, "./LargeData/OBIS/OBISData_part1of4.csv")
df2 <- obisdata[c(1000001:2000000),]
write.csv(df2, "./LargeData/OBIS/OBISData_part2of4.csv")
?seq
excel_rows <- seq(from = 1, to = nrow(obisdata), by = 1 000 000)
excel_rows <- seq(from = 1, to = nrow(obisdata), by = 1000000)
df1 <- obisdata[c(1:1000000),]
write.csv(df1, "./LargeData/OBIS/OBISData_part1of4.csv")
df2 <- obisdata[c(1000001:2000000),]
write.csv(df2, "./LargeData/OBIS/OBISData_part2of4.csv")
df3 <- obisdata[c(2000001:3000000),]
write.csv(df3, "./LargeData/OBIS/OBISData_part3of4.csv")
df4 <- obisdata[c(3000001:nrow(obisdata)),]
write.csv(df4, "./LargeData/OBIS/OBISData_part4of4.csv")
excel_rows
?ceiling
?round
round(nrow(obisdata), 1000000)
round(nrow(obisdata), digits = 1000000)
df5 <- obisdata[c(3000001:4000000),]
df5 <- obisdata[c(3000001:4000000),]
seq(from = 1, to = 999, by = 100)
excel_rows <- seq(from = 1, to = nrow(obisdata), by = 1*10^6)
excel_rows
length(excel_rows)
temp <- obisdata[c(1:1*10^6),]
temp <- obisdata[c(1:1000000),]
rm(backup)
temp <- obisdata[c(1:1*10^6),]
paste0("./LargeData/OBISData_part", i, "of", length(excel_rows), ".csv")
i=1
paste0("./LargeData/OBISData_part", i, "of", length(excel_rows), ".csv")
for (i in 1:length(excel_rows)){
if (i < length(excel_rows)){df <- obisdata[c(excel_rows[i],excel_rows[i+1]-1),]}
if (i == length(excel_rows)){df <- obisdata[c(excel_rows[i],nrow(obisdata)),]}
write.csv(df, paste0("./LargeData/OBISData_part", i, "of", length(excel_rows), ".csv"), row.names = F)
}
View(obisdata)
rm(df1, df2, df3, df4)
for (i in 1:2){
if (i < length(excel_rows)){df <- obisdata[c(excel_rows[i],excel_rows[i+1]-1),]}
else if (i == length(excel_rows)){df <- obisdata[c(excel_rows[i],nrow(obisdata)),]}
write.csv(df, paste0("./LargeData/OBISData_part", i, "of", length(excel_rows), ".csv"), row.names = F)
}
View(obisdata)
for (i in 1:2){
if (i < length(excel_rows)){df <- obisdata[c(excel_rows[i],excel_rows[i+1]-1),]}
else if (i == length(excel_rows)){df <- obisdata[c(excel_rows[i],nrow(obisdata)),]}
write.csv(df, paste0("./LargeData/OBISData_part", i, "of", length(excel_rows), ".csv"), row.names = F)
}
df <- obisdata[c(excel_rows[i],excel_rows[i+1]-1),]
print("new")
excel_rows(2)
excel_rows[2]
excel_rows[2+1]-1
for (i in 1:2){
if (i < length(excel_rows)){df <- obisdata[c(excel_rows[i]:excel_rows[i+1]-1),]}
else if (i == length(excel_rows)){df <- obisdata[c(excel_rows[i]:nrow(obisdata)),]}
write.csv(df, paste0("./LargeData/OBISData_part", i, "of", length(excel_rows), ".csv"), row.names = F)
}
df2 <- obisdata[c(1000001:2000000),]
View(df)
View(df2)
library(robis)
library(tidyverse)
library(rgbif)
gbif_occurence <- occ_download(geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353,
-59.8975 47.7984, -60.6775 47.3463))")
gbif_occurence <- occ_download(geometry = c(-60.6775, 47.3463, -59.6997, 46.3697, -57.7441, 46.9353,
-59.8975, 47.7984, -60.6775, 47.3463))
?occ_download
gbif_occurence <- occ_download(user = "runcrispy", geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353,
-59.8975 47.7984, -60.6775 47.3463))")
gbif_occurence <- occ_download(user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com", geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353,
-59.8975 47.7984, -60.6775 47.3463))")
gbif_occurence <- occ_search(geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353,
-59.8975 47.7984, -60.6775 47.3463))")
gbif_occurence
gbif_occurence <- occ_search(user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com",
geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353,
-59.8975 47.7984, -60.6775 47.3463))")
gbif_download <- occ_download(gbif_occurence, user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com",)
gbif_occurence <- occ_search(geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353,
-59.8975 47.7984, -60.6775 47.3463))")
gbif_download <- occ_download(gbif_occurence, user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com",)
gbif_download <- occ_download(gbif_occurence, user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com")
gbif_occurence <- occ_search(geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353,
-59.8975 47.7984, -60.6775 47.3463))")
write.csv(gbif_occurence, "./LargeData/GBIF/temp/csv")
###Loading packages
#library(devtools)
#install_github("iobis/robis")
library(robis)
library(tidyverse)
library(rgbif)
#library(ff)
getwd()
#######OBIS data download
obisdata <- occurrence(geometry =
"POLYGON ((-69.14795 44.02442, -67.71973 41.45920,
-61.52344 40.01079, -53.17383 41.57436, -47.37305 46.31658,
-46.31836 50.62507, -48.60352 54.74999, -53.65723 58.63122,
-63.32520 59.04055, -73.87207 46.76997, -69.14795 44.02442))")
#Split larger data into smaller csvs, each with 1 000 000 rows (excel limit is aroun 1 046 000)
excel_rows <- seq(from = 1, to = nrow(obisdata), by = 1*10^6) #This rounds down so for example it only does to 3 million rows if the dataframe has 3 000 001 rows
for (i in 1:length(excel_rows)){
if (i < length(excel_rows)){df <- obisdata[c(excel_rows[i]:excel_rows[i+1]-1),]} #Splitting into rows from 1-1000000, 1000001-2000000 etc.
else if (i == length(excel_rows)){df <- obisdata[c(excel_rows[i]:nrow(obisdata)),]} #Splitting the final document that probably doesn't fit evenly into a million rows
write.csv(df, paste0("./LargeData/OBIS/OBISData_part", i, "of", length(excel_rows), ".csv"), row.names = F)
}
gbif_occurence <- occ_search(geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353,
-59.8975 47.7984, -60.6775 47.3463))")
gbif_download <- occ_download('geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353,
-59.8975 47.7984, -60.6775 47.3463))"')
gbif_download <- occ_download('geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353,
-59.8975 47.7984, -60.6775 47.3463))"', user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com")
gbif_download <- occ_download('geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353, -59.8975 47.7984, -60.6775 47.3463))"')
gbif_download <- occ_download('user = runcrispy', 'pwd = "14socialbutterflies"', 'email = "runcrispy@gmail.com"', 'geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353, -59.8975 47.7984, -60.6775 47.3463))"')
gbif_download <- occ_download('user = runcrispy', 'pwd = "14socialbutterflies"', 'email = "runcrispy@gmail.com"', 'geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353, -59.8975 47.7984, -60.6775 47.3463))"')
gbif_download <- occ_download('user = "runcrispy"', 'pwd = "14socialbutterflies"', 'email = "runcrispy@gmail.com"', 'geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353, -59.8975 47.7984, -60.6775 47.3463))"')
gbif_download <- occ_download(user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com", 'geometry = "POLYGON ((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353, -59.8975 47.7984, -60.6775 47.3463))"')
occ_download('taxonKey = 7264332', 'hasCoordinate = TRUE')
occ_download(user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com", 'taxonKey = 7264332', 'hasCoordinate = TRUE')
gbif_download <- occ_download(user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com", geometry = 'POLYGON((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353, -59.8975 47.7984, -60.6775 47.3463))')
gbif_download <- occ_download(user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com", 'geometry = POLYGON((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353, -59.8975 47.7984, -60.6775 47.3463))')
occ_download_meta(gbif_download)
gbif_download <- occ_download(user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com", 'geometry = POLYGON((-60.6775 47.3463, -59.6997 46.3697, -57.7441 46.9353, -59.8975 47.7984, -60.6775 47.3463))')
occ_download_meta(gbif_download)
gbif_download <- occ_download(user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com",
'geometry = POLYGON((-71.10352 47.15984,-65.30273 42.29356,-50.18555 42.29356,-48.07617 51.06902,-55.45898 56.94497,-71.10352 47.15984))')
###Loading packages
#library(devtools)
#install_github("iobis/robis")
library(robis)
library(tidyverse)
library(rgbif)
#library(ff)
getwd()
gbif_download <- occ_download(user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com",
'geometry = POLYGON((-71.10352 47.15984,-65.30273 42.29356,-50.18555 42.29356,-48.07617 51.06902,-55.45898 56.94497,-71.10352 47.15984))')
gbif_download
occ_download_meta(gbif_download)
gbif_occurence <- occ_search('geometry = POLYGON((-71.10352 47.15984,-65.30273 42.29356,-50.18555 42.29356,-48.07617 51.06902,-55.45898 56.94497,-71.10352 47.15984))')
gbif_occurence <- occ_search('geometry = POLYGON(-71.10352 47.15984,-65.30273 42.29356,-50.18555 42.29356,-48.07617 51.06902,-55.45898 56.94497,-71.10352 47.15984)')
gbif_occurence <- occ_search(geometry = POLYGON(-71.10352 47.15984,-65.30273 42.29356,-50.18555 42.29356,-48.07617 51.06902,-55.45898 56.94497,-71.10352 47.15984))
gbif_occurence <- occ_search('geometry = POLYGON((-71.10352 47.15984,-65.30273 42.29356,-50.18555 42.29356,-48.07617 51.06902,-55.45898 56.94497,-71.10352 47.15984))')
gbif_occurence <- occ_search(geometry = 'POLYGON((-71.10352 47.15984,-65.30273 42.29356,-50.18555 42.29356,-48.07617 51.06902,-55.45898 56.94497,-71.10352 47.15984))')
gbif_download <- occ_download(user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com",
geometry = 'POLYGON((-71.10352 47.15984,-65.30273 42.29356,-50.18555 42.29356,-48.07617 51.06902,-55.45898 56.94497,-71.10352 47.15984))')
gbif_download <- occ_download(user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com",
geometry = 'POLYGON((-71.10352 47.15984,-65.30273 42.29356,-50.18555 42.29356,-48.07617 51.06902,-55.45898 56.94497,-71.10352 47.15984))')
gbif_download <- occ_download(user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com",
'geometry = POLYGON((-71.10352 47.15984,-65.30273 42.29356,-50.18555 42.29356,-48.07617 51.06902,-55.45898 56.94497,-71.10352 47.15984))')
gbif_download
gbif_occurence <- occ_search(geometry = 'POLYGON((-71.10352 47.15984,-65.30273 42.29356,-50.18555 42.29356,-48.07617 51.06902,-55.45898 56.94497,-71.10352 47.15984))')
gbif_occurence
?occ_data
gbif_download <- occ_download(user = "runcrispy", pwd = "14socialbutterflies", email = "runcrispy@gmail.com",
'geometry = POLYGON((-71.10352 47.15984,-65.30273 42.29356,-50.18555 42.29356,-48.07617 51.06902,-55.45898 56.94497,-71.10352 47.15984))')
occ_download_meta(gbif_download)
occ_download_meta(gbif_download)
###Loading packages
#library(devtools)
#install_github("iobis/robis")
library(robis)
library(tidyverse)
library(rgbif)
#library(ff)
getwd()
memory.limit(size=25000)
library(readr)
?readr::read_delim
?read_delim
dat <- data.table::fread("K:/Sam_project/Sam_Github/LargeData/GBIF/GBIF_Total.csv", na.strings = c("", NA))
View(dat)
excel_rows <- seq(from = 1, to = nrow(dat), by = 1*10^6) #This rounds down so for example it only does to 3 million rows if the dataframe has 3 000 001 rows
excel_rows
for (i in 1:length(excel_rows)){
if (i < length(excel_rows)){df <- dat[c(excel_rows[i]:excel_rows[i+1]-1),]} #Splitting into rows from 1-1000000, 1000001-2000000 etc.
else if (i == length(excel_rows)){df <- dat[c(excel_rows[i]:nrow(dat)),]} #Splitting the final document that probably doesn't fit evenly into a million rows
write.csv(df, paste0("./LargeData/GBIF/GBIFData_part", i, "of", length(excel_rows), ".csv"), row.names = F)
}
library(rgeos)
library(sp)
#######################################
#3 Letter word
x <- c(1,4); y <- c(1,1); Line1 <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
x <- c(6,9); y <- c(1,1); Line2 <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
x <- c(11,14); y <- c(1,1); Line3 <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
plot(Line1, xlim = c(0,15), ylim = c(0,11))
plot(Line2, add=T)
plot(Line3, add=T)
x <- c(9,12); y <- c(6,6); Platform <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
x <- c(10.5,10.5); y <- c(6,10); Pole <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
x <- c(8,10.5); y <- c(10,10); Axis <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
x <- c(8,8); y <- c(10,9.5); Tick <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
X1 <- gUnion(Platform, Pole)
X1 <- gUnion(X1, Axis)
X1 <- gUnion(X1, Tick)
library(sf)
install.packages("sf")
pts <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
pts
poly <- st_polygon(pts)
library(sf)
poly <- st_polygon(pts)
pts = list(pts)
poly <- st_polygon(pts)
ploy
poly
plot(poly)
OBIS_pts <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
OBIS_pts = list(OBIS_pts)
OBIS_poly <- st_polygon(OBIS_poly)
OBIS_pts <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
OBIS_pts = list(OBIS_pts)
OBIS_poly <- st_polygon(OBIS_pts)
str(OBIS_poly)
temp <- st_transform(OBIS_poly, +proj=longlat +datum=NAD27 +no_defs)
temp <- st_transform(OBIS_poly, crs= "+proj=longlat +datum=NAD27 +no_defs")
st_crs(OBIS_poly) <- "+proj=longlat +datum=NAD27 +no_defs"
temp <- st_transform(OBIS_poly, crs= 3857)
###Loading packages
library(sf)
OBIS_pts <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
OBIS_pts = list(OBIS_pts)
OBIS_poly <- st_polygon(OBIS_pts)
st_crs(OBIS_poly)
temp <- st_transform(OBIS_poly, crs = 3857)
temp <- st_transform(OBIS_poly, 3857)
?st_transform
temp <- st_transform(OBIS_poly, "+proj=longlat +datum=NAD27 +no_defs")
temp <- st_transform(OBIS_poly, "+proj=longlat +datum=NAD27")
temp <- st_transform(OBIS_poly, 3857)
OBIS_poly
st_crs(OBIS_poly)
temp <- st_transform(OBIS_poly, 3857)
temp <- st_transform(OBIS_poly, "+init=epsg:3857")
temp <- st_transform(OBIS_poly, CRS = "+init=epsg:3857")
temp <- st_transform(list(OBIS_pts), CRS = "+init=epsg:3857")
temp <- st_transform(OBIS_poly, CRS = "+init=epsg:3857")
temp <- st_transform(OBIS_poly)
OBIS_poly <- st_polygon(OBIS_pts)
str(OBIS_poly)
st_crs(OBIS_poly)
st_crs(OBIS_poly) <- 4326
st_transform(OBIS_poly, 3857)
st_transform(OBIS_poly, "+proj=eqc")
st_transform(OBIS_pts, "+proj=eqc")
st_transform(OBIS_poly, "+proj=eqc")
st_transform(OBIS_poly, crs = 3857)
st_transform(OBIS_poly, crs = 4326)
class(OBIS_poly)
plot(OBIS_poly)
new = st_as_sf(OBIS_poly)
?st_as_sf
new = st_as_sf(OBIS_pts)
OBIS_pts <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new = st_as_sf(OBIS_pts)
new = st_transform(OBIS_poly, "+proj=eqc")
