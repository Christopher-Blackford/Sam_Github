new <- list(new
new <- SpatialPolygons(new, proj4string=CRS(3587))
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- Polygon(coords = new)
new <- list(new)
new <- SpatialPolygons(new, proj4string=CRS(3587))
new <- SpatialPolygons(new, proj4string = 3587)
new <- Polygon(coords = new)
new <- list(new)
new <- Polygons(new)
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- Polygon(coords = new)
new <- list(new)
new <- Polygons(new)
new <- SpatialPolygons(new, proj4string = 3587)
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- Polygon(coords = new)
new <- list(new)
new <- Polygons(new, ID="ID")
new <- SpatialPolygons(new, proj4string = 3587)
new <- SpatialPolygons(list(new), proj4string = 3587)
new <- SpatialPolygons(list(new), proj4string = CRS(3587))
new <- SpatialPolygons(list(new), proj4string = CRS("+proj=longlat +datum=WGS84"))
plot(new)
?SpatialPolygons
new <- SpatialPolygonsDataFrame(new, data = data.frame(1))
new
new <- SpatialPolygonsDataFrame(new, data = as.data.frame(1))
row.names(new)
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- Polygon(coords = new)
new <- list(new)
new <- Polygons(new, ID="ID")
new <- SpatialPolygons(list(new), proj4string = CRS("+proj=longlat +datum=WGS84"))
row.names(new)
ConPoly_ID <- 1
new <- SpatialPolygonsDataFrame(new, data = as.data.frame(ConPoly_ID))
as.data.frame(ConPoly_ID) <- 1
ConPoly_ID <- 1
ConPoly_ID <- as.data.frame(ConPoly_ID)
temp <- SpatialPolygonsDataFrame(new, data = ConPoly_ID)
View(ConPoly_ID)
ID <- 1
ID <- as.data.frame(ID)
temp <- SpatialPolygonsDataFrame(new, data = ID)
new
nrow(new)
row.names(new)
ID <- row.names(new)
ID <- as.data.frame(ID)
temp <- SpatialPolygonsDataFrame(new, data = ID)
row.names(new)
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- Polygon(coords = new)
new <- list(new)
new <- Polygons(new, ID="ID")
new <- SpatialPolygons(list(new), proj4string = CRS("+proj=longlat +datum=WGS84"))
ID <- row.names(new)
ID <- as.data.frame(ID)
temp <- SpatialPolygonsDataFrame(new, data = ID)
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- Polygon(coords = new)
new <- list(new)
new <- Polygons(new, ID="1")
new <- SpatialPolygons(list(new), proj4string = CRS("+proj=longlat +datum=WGS84"))
ID <- row.names(new)
ID <- as.data.frame(ID)
temp <- SpatialPolygonsDataFrame(new, data = ID)
temp
temp@data
getwd()
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
Poly_coords <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
Study_area <- Polygon(coords = Poly_coords)
Study_area <- list(Study_area)
Study_area <- Polygons(Study_area, ID="1")
Study_area <- list(Study_area)
Study_area <- SpatialPolygons(Study_area, proj4string = CRS("+proj=longlat +datum=WGS84"))
ID <- row.names(Study_area)
ID <- as.data.frame(ID)
Study_area <- SpatialPolygonsDataFrame(Study_area, data = ID)
writeOGR(Study_area, dsn = "./output/shapefiles/temp", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
writeOGR(Study_area, dsn = "./output/shapefiles/temp", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
?writeOGR
writeOGR(Study_area, dsn = "./output/shapefiles", layer = "temp", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
?spTransform
temp <- spTransform(Study_area, CRS(8583))
temp <- spTransform(Study_area, 8583)
?spTransform
temp <- spTransform(Study_area, CRS("+init=epsg:8583"))
temp <- spTransform(Study_area, CRS("+init=SR-ORG:8583"))
temp <- spTransform(Study_area, CRS("+proj=albers +datum=WGS84""))
writeOGR(Study_area, dsn = "./output/shapefiles", layer = "temp", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
temp <- spTransform(Study_area, CRS("+proj=albers +datum=WGS84"))
temp <- spTransform(Study_area, CRS("+proj=albers +datum=WGS84"))
temp <- spTransform(Study_area, CRS("+proj=albers +datum=NAD83"))
temp <- spTransform(Study_area, CRS("+proj=Albers +datum=NAD83"))
?make_EPSG()
temp <- spTransform(Study_area, CRS("+init=espg:9822"))
temp <- spTransform(Study_area, CRS("+init=epsg:9822"))
atlantic_projection <- readOGR("./output/atlantic projection", "Heaxgon_grid")
getwd()
atlantic_projection <- readOGR("./output/atlantic-projection", "Heaxgon_grid")
atlantic_projection <- readOGR("./output/atlantic-projection", "Hexagon_grid")
atlantic_projection <- readOGR("./output/atlantic_projection", "Hexagon_grid")
atlantic_projection@proj4string
new <- spTransform(Study_area, atlantic_projection@proj4string)
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
#Loading up atlantic projection
atlantic_projection <- readOGR("./output/atlantic_projection", "Hexagon_grid")
Poly_coords <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
Study_area <- Polygon(coords = Poly_coords)
Study_area <- list(Study_area)
Study_area <- Polygons(Study_area, ID="1")
Study_area <- list(Study_area)
Study_area <- SpatialPolygons(Study_area, proj4string = CRS("+proj=longlat +datum=WGS84"))
ID <- row.names(Study_area)
ID <- as.data.frame(ID)
Study_area <- SpatialPolygonsDataFrame(Study_area, data = ID)
Study_area <- spTransform(Study_area, atlantic_projection@proj4string)
writeOGR(Study_area, dsn = "./output/shapefiles", layer = "temp", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
View(Poly_coords)
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
#Loading up atlantic projection
atlantic_projection <- readOGR("./output/atlantic_projection", "Hexagon_grid")
Poly_coords <- matrix(c(-69.14795, 44.02442,
-68.106, 40.426,
-62.457, 38.505,
-52.631, 41.334,
-47.000, 46.000,
-46.31836, 50.62507,
-48.60352, 54.74999,
-53.65723, 58.63122,
-63.32520, 59.04055,
-75.353, 44.636,
-69.14795, 44.02442), ncol=2, byrow=TRUE)
Poly_coords <- matrix(c(-69.14795, 44.02442,
-68.106, 40.426,
-62.457, 38.505,
-52.631, 41.334,
-47.000, 46.000,
-46.31836, 50.62507,
-48.60352, 54.74999,
-53.65723, 58.63122,
-63.32520, 59.04055,
-75.353, 44.636,
-69.14795, 44.02442), ncol=2, byrow=TRUE)
Study_area <- Polygon(coords = Poly_coords)
Study_area <- list(Study_area)
Study_area <- Polygons(Study_area, ID="1")
Study_area <- list(Study_area)
Study_area <- SpatialPolygons(Study_area, proj4string = CRS("+proj=longlat +datum=WGS84"))
ID <- row.names(Study_area)
ID <- as.data.frame(ID)
Study_area <- SpatialPolygonsDataFrame(Study_area, data = ID)
Study_area <- spTransform(Study_area, atlantic_projection@proj4string)
plot(Study_area)
writeOGR(Study_area, dsn = "./output/shapefiles", layer = "temp2", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
atlantic_projection@proj4string
str(atlantic_projection@proj4string)
identical(atlantic_projection@proj4string,CRS(+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs
+ellps=GRS80 +towgs84=0,0,0))
temp <- CRS(+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0)
temp <- CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")
identical(temp, atlantic_projection@proj4string)
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
#Loading up atlantic projection
atlantic_projection <- readOGR("./output/atlantic_projection", "Hexagon_grid")
#temp <- CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")
#identical(temp, atlantic_projection@proj4string)
Poly_coords <- matrix(c(-69.14795, 44.02442,
-68.106, 40.426,
-62.457, 38.505,
-52.631, 41.334,
-47.000, 46.000,
-46.31836, 50.62507,
-48.60352, 54.74999,
-53.65723, 58.63122,
-63.32520, 59.04055,
-75.353, 44.636,
-69.14795, 44.02442), ncol=2, byrow=TRUE)
#Going from list of coordinates to spatial polygon
Study_area <- Polygon(coords = Poly_coords)
Study_area <- list(Study_area)
Study_area <- Polygons(Study_area, ID="1")
Study_area <- list(Study_area)
Study_area <- SpatialPolygons(Study_area, proj4string = CRS("+proj=longlat +datum=WGS84"))
#Adding a dummy dataframe to spatial polygon to make "SpatialPolygonsDataFrame" i.e. file that can be exported to shapefile
ID <- row.names(Study_area)
ID <- as.data.frame(ID)
Study_area <- SpatialPolygonsDataFrame(Study_area, data = ID)
#Projecting shapefile to albers equal area conic
Study_area <- spTransform(Study_area, CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))
plot(Study_area)
hex_area_km <- 560
hex_area <- hex_area_km*1000000
temp <- hex_area_km*1*10^6
identical(temp, hex_area)
hex_area <- hex_area_km*10^6
identical(temp, hex_area)
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
ConPoly_hex = gBuffer(ConPoly_hex, width = 0)
Study_area_hex = gBuffer(Study_area_hex, width = 0)
Study_area_hex <- Study_area
#0.25x0.25 degrees is approx. 20 horizontal X 28 vertical km = 560 km squared
hex_area_km <- 560
hex_area <- hex_area_km*10^6
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
Study_area_hex = gBuffer(Study_area_hex, width = 0)
HexPts <- spsample(Study_area_hex, type="hexagonal", cellsize = dist_between_centroids, offset = c(0, 0))
HexPols <- HexPoints2SpatialPolygons(HexPts)
plot(HexPols)
EEZ <- readOGR("/shapefiles/eez_project", "eez_project")
EEZ <- readOGR("/shapefiles", "eez_project")
EEZ <- readOGR("./shapefiles", "eez_project")
EEZ <- readOGR("./shapefiles", "eez_project")
EEZ <- readOGR("./shapefiles/eez_project", "eez_project")
identical(EEZ@proj4string, atlantic_projection@proj4string)
EEZ@proj4string
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
#Loading EEZ
EEZ <- readOGR("./shapefiles/eez_project", "eez_project")
#EEZ@proj4string = CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")
Poly_coords <- matrix(c(-69.14795, 44.02442,
-68.106, 40.426,
-62.457, 38.505,
-52.631, 41.334,
-47.000, 46.000,
-46.31836, 50.62507,
-48.60352, 54.74999,
-53.65723, 58.63122,
-63.32520, 59.04055,
-75.353, 44.636,
-69.14795, 44.02442), ncol=2, byrow=TRUE)
#Going from list of coordinates to spatial polygon
Study_area <- Polygon(coords = Poly_coords)
Study_area <- list(Study_area)
Study_area <- Polygons(Study_area, ID="1")
Study_area <- list(Study_area)
Study_area <- SpatialPolygons(Study_area, proj4string = CRS("+proj=longlat +datum=WGS84"))
#Projecting shapefile to albers equal area conic
Study_area <- spTransform(Study_area, CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))
plot(Study_area)
temp <- gIntersection(Study_area, EEZ, byid = FALSE, drop_lower_td = TRUE) #This works, but you'll have to choose a shapefile that includes islands and doesn't cut-off at rivers
plot(temp)
str(temp)
str(temp@data)
row.names(temp)
Study_area <- gIntersection(Study_area, EEZ, byid = FALSE, drop_lower_td = TRUE) #This works, but you'll have to choose a shapefile that includes islands and doesn't cut-off at rivers
#Adding a dummy dataframe to spatial polygon to make "SpatialPolygonsDataFrame" i.e. file that can be exported to shapefile
ID <- row.names(Study_area)
ID <- as.data.frame(ID)
Study_area <- SpatialPolygonsDataFrame(Study_area, data = ID)
plot(Study_area)
Study_area@data
writeOGR(Study_area, dsn = "./output/shapefiles", layer = "Study_Area", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
Study_area_hex <- Study_area
#0.25x0.25 degrees is approx. 20 horizontal X 28 vertical km = 560 km squared
hex_area_km <- 560
hex_area <- hex_area_km*10^6
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
Study_area_hex = gBuffer(Study_area_hex, width = 0)
HexPts <- spsample(Study_area_hex, type="hexagonal", cellsize = dist_between_centroids, offset = c(0, 0))
HexPols <- HexPoints2SpatialPolygons(HexPts)
plot(HexPols)
row.names(HexPols) <- as.character(1:length(HexPols))
Poly_ID <- 1:length(HexPols)
HexPols <- SpatialPolygonsDataFrame(HexPols, as.data.frame(Poly_ID))
ConPoly <- HexPols
Study_area_hex <- Study_area
#0.25x0.25 degrees is approx. 20 horizontal X 28 vertical km = 560 km squared
hex_area_km <- 560
hex_area <- hex_area_km*10^6
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
Study_area_hex = gBuffer(Study_area_hex, width = 0)
HexPts <- spsample(Study_area_hex, type="hexagonal", cellsize = dist_between_centroids, offset = c(0, 0))
HexPols <- HexPoints2SpatialPolygons(HexPts)
plot(HexPols)
###Creating the hexagon layer
Study_area_hex <- Study_area
#0.25x0.25 degrees is approx. 20 horizontal X 28 vertical km = 560 km squared
hex_area_km <- 560
hex_area <- hex_area_km*10^6
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
Study_area_hex = gBuffer(Study_area_hex, width = 0)
HexPts <- spsample(Study_area_hex, type="hexagonal", cellsize = dist_between_centroids, offset = c(0, 0))
Study_area_hex <- HexPoints2SpatialPolygons(HexPts)
plot(Study_area_hex)
#Adding a dummy dataframe to spatial polygon to make "SpatialPolygonsDataFrame" i.e. file that can be exported to shapefile
row.names(Study_area_hex) <- as.character(1:length(Study_area_hex))
Poly_ID <- 1:length(Study_area_hex)
Study_area_hex <- SpatialPolygonsDataFrame(Study_area_hex, as.data.frame(Poly_ID))
plot(Study_area_hex)
writeOGR(Study_area_hex, dsn = "./output/shapefiles", layer = "Study_Area_hex",
driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
###Loading packages
library(tidyverse)
library(rgdal)
library(rgeos)
library(data.table)
##Loading custom functions
source("./sub_code/functions/my_point_in_poly.R")
#Change the amount of memory being used
memory.limit(size = 25000)
filenames <- list.files(path="LargeData/OBIS/", pattern= "OBISData_", full.names=TRUE, recursive=T)
# load all files into a list
datalist <- lapply(filenames, read.csv)
###Loading packages
library(tidyverse)
library(rgdal)
library(rgeos)
library(data.table)
##Loading custom functions
source("./sub_code/functions/my_point_in_poly.R")
#Change the amount of memory being used
memory.limit(size = 25000)
filenames <- list.files(path="LargeData/OBIS/", pattern= "OBISData_", full.names=TRUE, recursive=T)
i=1
filenames[i]
to_bind <- read.csv(filenames[i])
temp <- rbind(temp,to_bind)
temp <- NULL
temp <- rbind(temp,to_bind)
identical(temp,to_bind)
length(filenames)
temp <- NULL
for (i in 1:length(filenames)){
to_bind <- read.csv(filenames[i])
temp <- rbind(temp,to_bind)
}
rm(to_bind)
OBIS=temp
rm(temp)
names(OBIS)
obisnames<- c('id', 'class', 'phylum', 'family', 'order', 'species', 'decimalLongitude', 'decimalLatitude', 'obisID', 'countryCode', 'catalogNumber')
head(OBIS)
obisnames<- c('id', 'class', 'phylum', 'family', 'order', 'species', 'decimalLongitude', 'decimalLatitude', 'obisID', 'countryCode', 'catalogNumber')
OBIS <- OBIS[obisnames]
###Spatial subset based on being within study extent
Study_area_hex <- readOGR("./output/shapefiles", "Study_area_hex")
getwd()
###Spatial subset based on being within study extent
Study_Area_hex <- readOGR("./output/shapefiles", "Study_Area_hex")
xy <- subset(OBIS, select = c(decimalLongitude, decimalLatitude))
OBIS_observations <- SpatialPointsDataFrame(coords = xy, data = OBIS, proj4string = CRS("+proj=longlat +datum=WGS84"))
OBIS_observations <- spTransform(OBIS_observations, Study_Area_hex@proj4string)
writeOGR(OBIS_observations, dsn = "./output", layer = "temp",
driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
head(Study_Area_hex@data)
temp <- my.point.in.poly(OBIS_observations, Study_Area_hex)
head(temp@data)
xy<-temp
#####Testing function
my.point.in.poly <- function (x, y){
#Testing function
z <- x[!is.na(sp::over(x, sp::geometry(y))), ] #clips spatial points to study extent? = 866463 released points but some still have NAs
z_df <- data.frame(sp::over(x, y))
#z_df <- na.omit(z_df)
z@data <- z_df
x_df <- x@data
z <- sp::merge(z, x_df, by = "row.names", all.x = FALSE) #and this?
rownames(z@data) <- z@data$Row.names
z@data$Row.names <- NULL
z@proj4string <- x@proj4string
rm(z_df, x_df)
return(z)
}
temp <- my.point.in.poly(OBIS_observations, Study_Area_hex)
OBIS_observations=temp
temp <- OBIS_observations@data
head(temp)
View(temp)
OBIS_observations <- SpatialPointsDataFrame(coords = xy, data = OBIS, proj4string = CRS("+proj=longlat +datum=WGS84"))
OBIS_observations <- spTransform(OBIS_observations, Study_Area_hex@proj4string)
xy <- subset(OBIS, select = c(decimalLongitude, decimalLatitude))
OBIS_observations <- SpatialPointsDataFrame(coords = xy, data = OBIS, proj4string = CRS("+proj=longlat +datum=WGS84"))
OBIS_observations <- spTransform(OBIS_observations, Study_Area_hex@proj4string)
x=OBIS_observations;y=Study_Area_hex
#Testing function
z <- x[!is.na(sp::over(x, sp::geometry(y))), ] #clips spatial points to study extent? = 866463 released points but some still have NAs
z_df <- data.frame(sp::over(x, y))
head(z_df)
z_df <- na.omit(z_df)
xy <- subset(OBIS, select = c(decimalLongitude, decimalLatitude))
OBIS_observations <- SpatialPointsDataFrame(coords = xy, data = OBIS, proj4string = CRS("+proj=longlat +datum=WGS84"))
OBIS_observations <- spTransform(OBIS_observations, Study_Area_hex@proj4string)
#writeOGR(OBIS_observations, dsn = "./output", layer = "temp", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
OBIS_observations <- my.point.in.poly(OBIS_observations, Study_Area_hex)
OBIS_observations <- OBIS_observations@data
##Loading custom functions
source("./sub_code/functions/my_point_in_poly.R")
xy <- subset(OBIS, select = c(decimalLongitude, decimalLatitude))
OBIS_observations <- SpatialPointsDataFrame(coords = xy, data = OBIS, proj4string = CRS("+proj=longlat +datum=WGS84"))
OBIS_observations <- spTransform(OBIS_observations, Study_Area_hex@proj4string)
#writeOGR(OBIS_observations, dsn = "./output", layer = "temp", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
OBIS_observations <- my.point.in.poly(OBIS_observations, Study_Area_hex)
OBIS_observations <- OBIS_observations@data
#
##
###
####
#####
#Clear workspace
rm(list=ls())
###Loading packages
library(tidyverse)
library(rgdal)
library(rgeos)
library(data.table)
##Loading custom functions
source("./sub_code/functions/my_point_in_poly.R")
#Change the amount of memory being used
memory.limit(size = 25000)
########################
########################
#1. Loading in OBIS files and clipping to study extent (Chris)
filenames <- list.files(path="LargeData/OBIS/", pattern= "OBISData_", full.names=TRUE, recursive=T)
# load all files into a list
#datalist <- lapply(filenames, read.csv)
OBIS <- NULL
for (i in 1:length(filenames)){temp <- read.csv(filenames[i])
OBIS <- rbind(OBIS,temp)}
rm(temp)
names(OBIS)
obisnames<- c('id', 'class', 'phylum', 'family', 'order', 'species', 'decimalLongitude', 'decimalLatitude', 'obisID', 'countryCode', 'catalogNumber')
OBIS <- OBIS[obisnames]
###Spatial subset based on being within study extent
Study_Area_hex <- readOGR("./output/shapefiles", "Study_Area_hex")
xy <- subset(OBIS, select = c(decimalLongitude, decimalLatitude))
OBIS_observations <- SpatialPointsDataFrame(coords = xy, data = OBIS, proj4string = CRS("+proj=longlat +datum=WGS84"))
OBIS_observations <- spTransform(OBIS_observations, Study_Area_hex@proj4string)
OBIS_observations <- my.point.in.poly(OBIS_observations, Study_Area_hex)
OBIS <- OBIS_observations@data
rm(OBIS_observations, xy, i, filenames, obisnames)
