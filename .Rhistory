10*10
10000
10000^2
??readOGR
??readOGR
require(rgdal)
EEZ <- readOGR("./shapefiles/Atlantic_eez", "Atlantic_eez")
plot(EEZ)
EEZ@data
ConPoly <- EEZ
ConPoly <- EEZ
ConPoly_hex <- ConPoly
.25/sqrt(2)
20*28
hex_area_km <- 560
hex_area <- hex_area_km*1000000
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
ConPoly_hex = gBuffer(ConPoly_hex, width = 0)
??gBuffer
library(rgeos)
?spsample
?HexPoints2SpatialPolygons
#Clear workspace
rm(list=ls())
library(rgdal)
library(rgeos)
library(sp)
#Clipping to your study extent
EEZ <- readOGR("./shapefiles/Atlantic_eez", "Atlantic_eez")
#Loading Remi's grid where larvae were released
#grid <- readOGR("./shapefiles", "")
#NAD_projection <- proj4string(grid)
#Dissolve into one polygon since so you can change grid dimensions
#grid <- spTransform(grid, EEZ@proj4string)
#grid <- gUnaryUnion(grid)
#Intersecting - don't know why this works and ConPoly2 <- grid[EEZ,] doesn't
#ConPoly <- gIntersection(grid, EEZ, byid = FALSE, drop_lower_td = TRUE) #This works, but you'll have to choose a shapefile that includes islands and doesn't cut-off at rivers
#Adding dataframe so you can create a shapefile of new study extent
#ConPoly_ID <- 1
#ConPoly <- SpatialPolygonsDataFrame(ConPoly, as.data.frame(ConPoly_ID))
#writeOGR(ConPoly, dsn = "", layer = "EEZ_hexagons",
#        driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
ConPoly <- EEZ
#Creating the hexagon layer
ConPoly_hex <- ConPoly
#0.25 degrees is approx. 20 horizontal X 28 vertical km = 560 km2
hex_area_km <- 560
hex_area <- hex_area_km*1000000
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
ConPoly_hex = gBuffer(ConPoly_hex, width = 0)
HexPts <- spsample(ConPoly_hex, type="hexagonal", cellsize = dist_between_centroids, offset = c(0, 0))
HexPols <- HexPoints2SpatialPolygons(HexPts)
plot(HexPols)
row.names(HexPols) <- as.character(1:length(HexPols))
Poly_ID <- 1:length(HexPols)
HexPols <- SpatialPolygonsDataFrame(HexPols, as.data.frame(Poly_ID))
ConPoly <- HexPols
writeOGR(ConPoly, dsn = "./output", layer = "Hexagon_grid",
driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
20*28
library(robis)
install.packages("robis")
library(devtools)
library(robis)
library(tidyverse)
library(rgbif)
install.packages("ff")
library(ff)
?ff
library(devtools)
library(robis)
library(tidyverse)
library(rgbif)
###Loading packages
library(devtools)
#install_github("iobis/robis")
library(robis)
library(tidyverse)
library(rgbif)
#library(ff)
getwd()
obisdata <- occurrence(geometry =
"POLYGON ((-69.14795 44.02442, -67.71973 41.45920,
-61.52344 40.01079, -53.17383 41.57436, -47.37305 46.31658,
-46.31836 50.62507, -48.60352 54.74999, -53.65723 58.63122,
-63.32520 59.04055, -73.87207 46.76997, -69.14795 44.02442))")
nrow(obisdata)
backup <- obisdata
df1 <- obisdata[c(1:10),]
View(obisdata)
View(df1)
df1 <- obisdata[c(1:1000000),]
getwd()
write.csv(df1, "./output/LargeData/df1.csv")
df2 <- obisdata[c(1000001:2000000),]
write.csv(df2, "./output/LargeData/df2.csv")
df3 <- obisdata[c(2000001:3901265),]
write.csv(df3, "./output/LargeData/df3.csv")
