?read_delim
dat <- data.table::fread("K:/Sam_project/Sam_Github/LargeData/GBIF/GBIF_Total.csv", na.strings = c("", NA))
View(dat)
excel_rows <- seq(from = 1, to = nrow(dat), by = 1*10^6) #This rounds down so for example it only does to 3 million rows if the dataframe has 3 000 001 rows
excel_rows
for (i in 1:length(excel_rows)){
if (i < length(excel_rows)){df <- dat[c(excel_rows[i]:excel_rows[i+1]-1),]} #Splitting into rows from 1-1000000, 1000001-2000000 etc.
else if (i == length(excel_rows)){df <- dat[c(excel_rows[i]:nrow(dat)),]} #Splitting the final document that probably doesn't fit evenly into a million rows
write.csv(df, paste0("./LargeData/GBIF/GBIFData_part", i, "of", length(excel_rows), ".csv"), row.names = F)
}
library(rgeos)
library(sp)
#######################################
#3 Letter word
x <- c(1,4); y <- c(1,1); Line1 <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
x <- c(6,9); y <- c(1,1); Line2 <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
x <- c(11,14); y <- c(1,1); Line3 <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
plot(Line1, xlim = c(0,15), ylim = c(0,11))
plot(Line2, add=T)
plot(Line3, add=T)
x <- c(9,12); y <- c(6,6); Platform <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
x <- c(10.5,10.5); y <- c(6,10); Pole <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
x <- c(8,10.5); y <- c(10,10); Axis <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
x <- c(8,8); y <- c(10,9.5); Tick <- SpatialLines(list(Lines(Line(cbind(x,y)), ID="a")))
X1 <- gUnion(Platform, Pole)
X1 <- gUnion(X1, Axis)
X1 <- gUnion(X1, Tick)
library(sf)
install.packages("sf")
pts <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
pts
poly <- st_polygon(pts)
library(sf)
poly <- st_polygon(pts)
pts = list(pts)
poly <- st_polygon(pts)
ploy
poly
plot(poly)
OBIS_pts <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
OBIS_pts = list(OBIS_pts)
OBIS_poly <- st_polygon(OBIS_poly)
OBIS_pts <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
OBIS_pts = list(OBIS_pts)
OBIS_poly <- st_polygon(OBIS_pts)
str(OBIS_poly)
temp <- st_transform(OBIS_poly, +proj=longlat +datum=NAD27 +no_defs)
temp <- st_transform(OBIS_poly, crs= "+proj=longlat +datum=NAD27 +no_defs")
st_crs(OBIS_poly) <- "+proj=longlat +datum=NAD27 +no_defs"
temp <- st_transform(OBIS_poly, crs= 3857)
###Loading packages
library(sf)
OBIS_pts <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
OBIS_pts = list(OBIS_pts)
OBIS_poly <- st_polygon(OBIS_pts)
st_crs(OBIS_poly)
temp <- st_transform(OBIS_poly, crs = 3857)
temp <- st_transform(OBIS_poly, 3857)
?st_transform
temp <- st_transform(OBIS_poly, "+proj=longlat +datum=NAD27 +no_defs")
temp <- st_transform(OBIS_poly, "+proj=longlat +datum=NAD27")
temp <- st_transform(OBIS_poly, 3857)
OBIS_poly
st_crs(OBIS_poly)
temp <- st_transform(OBIS_poly, 3857)
temp <- st_transform(OBIS_poly, "+init=epsg:3857")
temp <- st_transform(OBIS_poly, CRS = "+init=epsg:3857")
temp <- st_transform(list(OBIS_pts), CRS = "+init=epsg:3857")
temp <- st_transform(OBIS_poly, CRS = "+init=epsg:3857")
temp <- st_transform(OBIS_poly)
OBIS_poly <- st_polygon(OBIS_pts)
str(OBIS_poly)
st_crs(OBIS_poly)
st_crs(OBIS_poly) <- 4326
st_transform(OBIS_poly, 3857)
st_transform(OBIS_poly, "+proj=eqc")
st_transform(OBIS_pts, "+proj=eqc")
st_transform(OBIS_poly, "+proj=eqc")
st_transform(OBIS_poly, crs = 3857)
st_transform(OBIS_poly, crs = 4326)
class(OBIS_poly)
plot(OBIS_poly)
new = st_as_sf(OBIS_poly)
?st_as_sf
new = st_as_sf(OBIS_pts)
OBIS_pts <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new = st_as_sf(OBIS_pts)
new = st_transform(OBIS_poly, "+proj=eqc")
?SpatialPolygons
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
View(new)
new <- SpatialPolygons(coords = new)
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- SpatialPolygons(coords = new)
new <- Polygon(coords = new)
plot(new)
str(new)
new <- Polygons(new, ID = "ID")
new <- list(new)
new <- Polygons(new, ID = "")
new <- Polygons(new, ID = "ID")
str(new)
plot(new)
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- Polygon(coords = new)
new <- list(new
new <- SpatialPolygons(new, proj4string=CRS(3587))
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- Polygon(coords = new)
new <- list(new)
new <- SpatialPolygons(new, proj4string=CRS(3587))
new <- SpatialPolygons(new, proj4string = 3587)
new <- Polygon(coords = new)
new <- list(new)
new <- Polygons(new)
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- Polygon(coords = new)
new <- list(new)
new <- Polygons(new)
new <- SpatialPolygons(new, proj4string = 3587)
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- Polygon(coords = new)
new <- list(new)
new <- Polygons(new, ID="ID")
new <- SpatialPolygons(new, proj4string = 3587)
new <- SpatialPolygons(list(new), proj4string = 3587)
new <- SpatialPolygons(list(new), proj4string = CRS(3587))
new <- SpatialPolygons(list(new), proj4string = CRS("+proj=longlat +datum=WGS84"))
plot(new)
?SpatialPolygons
new <- SpatialPolygonsDataFrame(new, data = data.frame(1))
new
new <- SpatialPolygonsDataFrame(new, data = as.data.frame(1))
row.names(new)
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- Polygon(coords = new)
new <- list(new)
new <- Polygons(new, ID="ID")
new <- SpatialPolygons(list(new), proj4string = CRS("+proj=longlat +datum=WGS84"))
row.names(new)
ConPoly_ID <- 1
new <- SpatialPolygonsDataFrame(new, data = as.data.frame(ConPoly_ID))
as.data.frame(ConPoly_ID) <- 1
ConPoly_ID <- 1
ConPoly_ID <- as.data.frame(ConPoly_ID)
temp <- SpatialPolygonsDataFrame(new, data = ConPoly_ID)
View(ConPoly_ID)
ID <- 1
ID <- as.data.frame(ID)
temp <- SpatialPolygonsDataFrame(new, data = ID)
new
nrow(new)
row.names(new)
ID <- row.names(new)
ID <- as.data.frame(ID)
temp <- SpatialPolygonsDataFrame(new, data = ID)
row.names(new)
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- Polygon(coords = new)
new <- list(new)
new <- Polygons(new, ID="ID")
new <- SpatialPolygons(list(new), proj4string = CRS("+proj=longlat +datum=WGS84"))
ID <- row.names(new)
ID <- as.data.frame(ID)
temp <- SpatialPolygonsDataFrame(new, data = ID)
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
new <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
new <- Polygon(coords = new)
new <- list(new)
new <- Polygons(new, ID="1")
new <- SpatialPolygons(list(new), proj4string = CRS("+proj=longlat +datum=WGS84"))
ID <- row.names(new)
ID <- as.data.frame(ID)
temp <- SpatialPolygonsDataFrame(new, data = ID)
temp
temp@data
getwd()
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
?SpatialPolygons
Poly_coords <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
Study_area <- Polygon(coords = Poly_coords)
Study_area <- list(Study_area)
Study_area <- Polygons(Study_area, ID="1")
Study_area <- list(Study_area)
Study_area <- SpatialPolygons(Study_area, proj4string = CRS("+proj=longlat +datum=WGS84"))
ID <- row.names(Study_area)
ID <- as.data.frame(ID)
Study_area <- SpatialPolygonsDataFrame(Study_area, data = ID)
writeOGR(Study_area, dsn = "./output/shapefiles/temp", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
writeOGR(Study_area, dsn = "./output/shapefiles/temp", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
?writeOGR
writeOGR(Study_area, dsn = "./output/shapefiles", layer = "temp", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
?spTransform
temp <- spTransform(Study_area, CRS(8583))
temp <- spTransform(Study_area, 8583)
?spTransform
temp <- spTransform(Study_area, CRS("+init=epsg:8583"))
temp <- spTransform(Study_area, CRS("+init=SR-ORG:8583"))
temp <- spTransform(Study_area, CRS("+proj=albers +datum=WGS84""))
writeOGR(Study_area, dsn = "./output/shapefiles", layer = "temp", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
temp <- spTransform(Study_area, CRS("+proj=albers +datum=WGS84"))
temp <- spTransform(Study_area, CRS("+proj=albers +datum=WGS84"))
temp <- spTransform(Study_area, CRS("+proj=albers +datum=NAD83"))
temp <- spTransform(Study_area, CRS("+proj=Albers +datum=NAD83"))
?make_EPSG()
temp <- spTransform(Study_area, CRS("+init=espg:9822"))
temp <- spTransform(Study_area, CRS("+init=epsg:9822"))
atlantic_projection <- readOGR("./output/atlantic projection", "Heaxgon_grid")
getwd()
atlantic_projection <- readOGR("./output/atlantic-projection", "Heaxgon_grid")
atlantic_projection <- readOGR("./output/atlantic-projection", "Hexagon_grid")
atlantic_projection <- readOGR("./output/atlantic_projection", "Hexagon_grid")
atlantic_projection@proj4string
new <- spTransform(Study_area, atlantic_projection@proj4string)
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
#Loading up atlantic projection
atlantic_projection <- readOGR("./output/atlantic_projection", "Hexagon_grid")
Poly_coords <- matrix(c(-69.14795, 44.02442, -67.71973, 41.45920,
-61.52344, 40.01079, -53.17383, 41.57436, -47.37305, 46.31658,
-46.31836, 50.62507, -48.60352, 54.74999, -53.65723, 58.63122,
-63.32520, 59.04055, -73.87207, 46.76997, -69.14795, 44.02442), ncol=2, byrow=TRUE)
Study_area <- Polygon(coords = Poly_coords)
Study_area <- list(Study_area)
Study_area <- Polygons(Study_area, ID="1")
Study_area <- list(Study_area)
Study_area <- SpatialPolygons(Study_area, proj4string = CRS("+proj=longlat +datum=WGS84"))
ID <- row.names(Study_area)
ID <- as.data.frame(ID)
Study_area <- SpatialPolygonsDataFrame(Study_area, data = ID)
Study_area <- spTransform(Study_area, atlantic_projection@proj4string)
writeOGR(Study_area, dsn = "./output/shapefiles", layer = "temp", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
View(Poly_coords)
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
#Loading up atlantic projection
atlantic_projection <- readOGR("./output/atlantic_projection", "Hexagon_grid")
Poly_coords <- matrix(c(-69.14795, 44.02442,
-68.106, 40.426,
-62.457, 38.505,
-52.631, 41.334,
-47.000, 46.000,
-46.31836, 50.62507,
-48.60352, 54.74999,
-53.65723, 58.63122,
-63.32520, 59.04055,
-75.353, 44.636,
-69.14795, 44.02442), ncol=2, byrow=TRUE)
Poly_coords <- matrix(c(-69.14795, 44.02442,
-68.106, 40.426,
-62.457, 38.505,
-52.631, 41.334,
-47.000, 46.000,
-46.31836, 50.62507,
-48.60352, 54.74999,
-53.65723, 58.63122,
-63.32520, 59.04055,
-75.353, 44.636,
-69.14795, 44.02442), ncol=2, byrow=TRUE)
Study_area <- Polygon(coords = Poly_coords)
Study_area <- list(Study_area)
Study_area <- Polygons(Study_area, ID="1")
Study_area <- list(Study_area)
Study_area <- SpatialPolygons(Study_area, proj4string = CRS("+proj=longlat +datum=WGS84"))
ID <- row.names(Study_area)
ID <- as.data.frame(ID)
Study_area <- SpatialPolygonsDataFrame(Study_area, data = ID)
Study_area <- spTransform(Study_area, atlantic_projection@proj4string)
plot(Study_area)
writeOGR(Study_area, dsn = "./output/shapefiles", layer = "temp2", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
atlantic_projection@proj4string
str(atlantic_projection@proj4string)
identical(atlantic_projection@proj4string,CRS(+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs
+ellps=GRS80 +towgs84=0,0,0))
temp <- CRS(+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0)
temp <- CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")
identical(temp, atlantic_projection@proj4string)
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
#Loading up atlantic projection
atlantic_projection <- readOGR("./output/atlantic_projection", "Hexagon_grid")
#temp <- CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")
#identical(temp, atlantic_projection@proj4string)
Poly_coords <- matrix(c(-69.14795, 44.02442,
-68.106, 40.426,
-62.457, 38.505,
-52.631, 41.334,
-47.000, 46.000,
-46.31836, 50.62507,
-48.60352, 54.74999,
-53.65723, 58.63122,
-63.32520, 59.04055,
-75.353, 44.636,
-69.14795, 44.02442), ncol=2, byrow=TRUE)
#Going from list of coordinates to spatial polygon
Study_area <- Polygon(coords = Poly_coords)
Study_area <- list(Study_area)
Study_area <- Polygons(Study_area, ID="1")
Study_area <- list(Study_area)
Study_area <- SpatialPolygons(Study_area, proj4string = CRS("+proj=longlat +datum=WGS84"))
#Adding a dummy dataframe to spatial polygon to make "SpatialPolygonsDataFrame" i.e. file that can be exported to shapefile
ID <- row.names(Study_area)
ID <- as.data.frame(ID)
Study_area <- SpatialPolygonsDataFrame(Study_area, data = ID)
#Projecting shapefile to albers equal area conic
Study_area <- spTransform(Study_area, CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))
plot(Study_area)
hex_area_km <- 560
hex_area <- hex_area_km*1000000
temp <- hex_area_km*1*10^6
identical(temp, hex_area)
hex_area <- hex_area_km*10^6
identical(temp, hex_area)
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
ConPoly_hex = gBuffer(ConPoly_hex, width = 0)
Study_area_hex = gBuffer(Study_area_hex, width = 0)
Study_area_hex <- Study_area
#0.25x0.25 degrees is approx. 20 horizontal X 28 vertical km = 560 km squared
hex_area_km <- 560
hex_area <- hex_area_km*10^6
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
Study_area_hex = gBuffer(Study_area_hex, width = 0)
HexPts <- spsample(Study_area_hex, type="hexagonal", cellsize = dist_between_centroids, offset = c(0, 0))
HexPols <- HexPoints2SpatialPolygons(HexPts)
plot(HexPols)
EEZ <- readOGR("/shapefiles/eez_project", "eez_project")
EEZ <- readOGR("/shapefiles", "eez_project")
EEZ <- readOGR("./shapefiles", "eez_project")
EEZ <- readOGR("./shapefiles", "eez_project")
EEZ <- readOGR("./shapefiles/eez_project", "eez_project")
identical(EEZ@proj4string, atlantic_projection@proj4string)
EEZ@proj4string
#Hexagon 3
###Loading packages
library(rgdal)
library(rgeos)
library(sp)
#Loading EEZ
EEZ <- readOGR("./shapefiles/eez_project", "eez_project")
#EEZ@proj4string = CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")
Poly_coords <- matrix(c(-69.14795, 44.02442,
-68.106, 40.426,
-62.457, 38.505,
-52.631, 41.334,
-47.000, 46.000,
-46.31836, 50.62507,
-48.60352, 54.74999,
-53.65723, 58.63122,
-63.32520, 59.04055,
-75.353, 44.636,
-69.14795, 44.02442), ncol=2, byrow=TRUE)
#Going from list of coordinates to spatial polygon
Study_area <- Polygon(coords = Poly_coords)
Study_area <- list(Study_area)
Study_area <- Polygons(Study_area, ID="1")
Study_area <- list(Study_area)
Study_area <- SpatialPolygons(Study_area, proj4string = CRS("+proj=longlat +datum=WGS84"))
#Projecting shapefile to albers equal area conic
Study_area <- spTransform(Study_area, CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))
plot(Study_area)
temp <- gIntersection(Study_area, EEZ, byid = FALSE, drop_lower_td = TRUE) #This works, but you'll have to choose a shapefile that includes islands and doesn't cut-off at rivers
plot(temp)
str(temp)
str(temp@data)
row.names(temp)
Study_area <- gIntersection(Study_area, EEZ, byid = FALSE, drop_lower_td = TRUE) #This works, but you'll have to choose a shapefile that includes islands and doesn't cut-off at rivers
#Adding a dummy dataframe to spatial polygon to make "SpatialPolygonsDataFrame" i.e. file that can be exported to shapefile
ID <- row.names(Study_area)
ID <- as.data.frame(ID)
Study_area <- SpatialPolygonsDataFrame(Study_area, data = ID)
plot(Study_area)
Study_area@data
writeOGR(Study_area, dsn = "./output/shapefiles", layer = "Study_Area", driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
Study_area_hex <- Study_area
#0.25x0.25 degrees is approx. 20 horizontal X 28 vertical km = 560 km squared
hex_area_km <- 560
hex_area <- hex_area_km*10^6
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
Study_area_hex = gBuffer(Study_area_hex, width = 0)
HexPts <- spsample(Study_area_hex, type="hexagonal", cellsize = dist_between_centroids, offset = c(0, 0))
HexPols <- HexPoints2SpatialPolygons(HexPts)
plot(HexPols)
row.names(HexPols) <- as.character(1:length(HexPols))
Poly_ID <- 1:length(HexPols)
HexPols <- SpatialPolygonsDataFrame(HexPols, as.data.frame(Poly_ID))
ConPoly <- HexPols
Study_area_hex <- Study_area
#0.25x0.25 degrees is approx. 20 horizontal X 28 vertical km = 560 km squared
hex_area_km <- 560
hex_area <- hex_area_km*10^6
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
Study_area_hex = gBuffer(Study_area_hex, width = 0)
HexPts <- spsample(Study_area_hex, type="hexagonal", cellsize = dist_between_centroids, offset = c(0, 0))
HexPols <- HexPoints2SpatialPolygons(HexPts)
plot(HexPols)
###Creating the hexagon layer
Study_area_hex <- Study_area
#0.25x0.25 degrees is approx. 20 horizontal X 28 vertical km = 560 km squared
hex_area_km <- 560
hex_area <- hex_area_km*10^6
dist_between_centroids <- sqrt(2*hex_area/sqrt(3)) #This formula converts between interior hexagon area which is what we are interested in and distance between hexagon centroids which R uses to define hexagon layer
Study_area_hex = gBuffer(Study_area_hex, width = 0)
HexPts <- spsample(Study_area_hex, type="hexagonal", cellsize = dist_between_centroids, offset = c(0, 0))
Study_area_hex <- HexPoints2SpatialPolygons(HexPts)
plot(Study_area_hex)
#Adding a dummy dataframe to spatial polygon to make "SpatialPolygonsDataFrame" i.e. file that can be exported to shapefile
row.names(Study_area_hex) <- as.character(1:length(Study_area_hex))
Poly_ID <- 1:length(Study_area_hex)
Study_area_hex <- SpatialPolygonsDataFrame(Study_area_hex, as.data.frame(Poly_ID))
plot(Study_area_hex)
writeOGR(Study_area_hex, dsn = "./output/shapefiles", layer = "Study_Area_hex",
driver = "ESRI Shapefile", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)
